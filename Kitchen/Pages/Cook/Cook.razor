@page "/cook"
@using Kitchen.Backend.Models
@using Kitchen.Backend.Services

@inject RecipeService RecipeService

<MudContainer>
    <MudGrid>
        <MudItem xs="3">
            <MudList Clickable="true">
                @foreach (var item in _recipes)
                {
                    <MudListItem @onclick="() => SelectItem(item)">
                        @item.Name
                    </MudListItem>
                }
            </MudList>
            <MudTextField @bind-Value="NewRecipe" Label="Standard" Variant="Variant.Text"></MudTextField>
            <MudButton Variant="Variant.Filled" OnClick="AddRecipe">Add recipe</MudButton>
        </MudItem>
        <MudItem xs="9">
            @if (_selectedRecipe != null)
            {
                <MudCard>
                    <MudCardMedia Image="@_selectedRecipe.ImageUrl" Title="@_selectedRecipe.Name"/>
                    <MudCardContent>
                        @foreach (var instruction in _selectedRecipe.Instructions)
                        {
                            <MudGrid>
                                <MudItem xs="11">
                                    <MudTextField ReadOnly=!ReadOnly Variant="Variant.Text" Value="instruction.Description"/>
                                </MudItem>
                                <MudItem xs="1">
                                    <MudIconButton Icon="@Icons.Material.Filled.Delete" aria-label="delete"
                                                   OnClick="() => DeleteInstruction(instruction)" Class=@(ReadOnly ? "" : "invisible")></MudIconButton>
                                </MudItem>
                            </MudGrid>
                        }
                        <MudContainer Class="d-flex" Style="gap: 10px; align-items: center;">
                            <MudIconButton Icon="@Icons.Material.Filled.Add" aria-label="add"
                                           OnClick="AddInstruction" Class=@(ReadOnly ? "" : "invisible")></MudIconButton>
                            <MudIconButton Icon="@Icons.Material.Filled.Save" aria-label="save"
                                           OnClick="SaveInstructions" Class=@(ReadOnly ? "" : "invisible")></MudIconButton>
                            <MudIconButton Icon="@Icons.Material.Filled.DeleteForever" aria-label="save"
                                           OnClick="DeleteRecipe" Class=@(ReadOnly ? "" : "invisible")></MudIconButton>
                            <MudFileUpload T="IBrowserFile" FilesChanged="UploadImage" Class=@(ReadOnly ? "" : "invisible")>
                                <ButtonTemplate>
                                    <MudFab HtmlTag="label"
                                            Color="Color.Dark"
                                            Icon="@Icons.Material.Filled.Image"
                                            Label="Load picture"
                                            for="@context.Id"/>
                                </ButtonTemplate>
                            </MudFileUpload>
                        </MudContainer>
                    </MudCardContent>
                </MudCard>
            }
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    private List<Recipe> _recipes;
    private Recipe _selectedRecipe;
    public string NewRecipe { get; set; }

    [CascadingParameter]
    public bool ReadOnly { get; set; }

    protected override void OnInitialized()
    {
        // Initialize the list of items with some data
        _recipes = RecipeService.GetRecipes();

        // Set the initial selected item
        _selectedRecipe = _recipes.FirstOrDefault();
    }

    private void SelectItem(Recipe recipe)
    {
        _selectedRecipe = recipe;
    }

    private void AddRecipe()
    {
        RecipeService.AddRecipe(NewRecipe);
        StateHasChanged();
    }

    private void AddInstruction()
    {
        var instruction = new Step
        {
            Description = "Toggle edit and save new instruction here."
        };

        RecipeService.AddInstruction(_selectedRecipe.Id, instruction);
        StateHasChanged();
    }

    private void DeleteInstruction(Step instruction)
    {
        RecipeService.DeleteInstruction(_selectedRecipe.Id, instruction);
        StateHasChanged();
    }

    private async Task UploadImage(IBrowserFile file)
    {
        await RecipeService.AddImage(_selectedRecipe.Id, file);
        StateHasChanged();
    }

    private void SaveInstructions()
    {

    }

    private void DeleteRecipe()
    {
        RecipeService.DeleteRecipe(_selectedRecipe.Id);
        StateHasChanged();
    }
}